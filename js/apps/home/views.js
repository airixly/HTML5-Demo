// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["marionette", "ctrlVent", "text!./tpl/icon-item.html", "text!./tpl/empty.html"], function(Marionette, ctrlVent, iconWrapperTpl, emptyTpl) {
    var ContentView, EmptyView, IconItemView, _ref, _ref1, _ref2;
    return {
      IconItemView: IconItemView = (function(_super) {
        __extends(IconItemView, _super);

        function IconItemView() {
          _ref = IconItemView.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        IconItemView.prototype.className = "icon-circle-wrapper";

        IconItemView.prototype.template = _.template(iconWrapperTpl, null, {
          variable: "data"
        });

        IconItemView.prototype.events = {
          "click": "select"
        };

        IconItemView.prototype.select = function() {
          return ctrlVent.events.trigger("icon:clicked", this.model.get("name"));
        };

        return IconItemView;

      })(Marionette.ItemView),
      EmptyView: EmptyView = (function(_super) {
        __extends(EmptyView, _super);

        function EmptyView() {
          _ref1 = EmptyView.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        EmptyView.prototype.className = "empty-wrapper";

        EmptyView.prototype.template = _.template(emptyTpl);

        return EmptyView;

      })(Marionette.ItemView),
      ContentView: ContentView = (function(_super) {
        __extends(ContentView, _super);

        function ContentView() {
          _ref2 = ContentView.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        ContentView.prototype.className = "air-icons";

        ContentView.prototype.itemView = IconItemView;

        ContentView.prototype.emptyView = EmptyView;

        return ContentView;

      })(Marionette.CollectionView)
    };
  });

}).call(this);
